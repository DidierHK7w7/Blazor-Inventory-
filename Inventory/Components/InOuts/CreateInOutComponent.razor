@using Entities
@using Business

@code {
	InputOutputEntity oInOut = new InputOutputEntity();
	List<WarehouseEntity> warehouses = new List<WarehouseEntity>();
	List<StorageEntity> storages = new List<StorageEntity>();

	ProductEntity oProduct = new ProductEntity();
	StorageEntity oStorage = new StorageEntity();

	string msg;

	string buttonValue => oInOut.IsInput ? "Registrar entrada" : "Registrar salida";

	protected override async Task OnInitializedAsync()
	{
		warehouses = B_Warehouse.WarehouseList();
	}

	private void OnChangedWarehouse(ChangeEventArgs e)
	{
		var idWarehouse = e.Value.ToString();
		storages = B_Storage.StorageProductsByWarehouse(idWarehouse);
	}

	private void SaveInOut()
	{
		oStorage = storages.LastOrDefault(s => s.StorageId == oInOut.StorageId);
		oProduct = oStorage.Product;

		if (oInOut.IsInput)
		{
			oStorage.PartialQuantity = oStorage.PartialQuantity + oInOut.Quantity;
			B_Storage.UpdateStorage(oStorage);

			oProduct.TotalQuantity = oProduct.TotalQuantity + oInOut.Quantity;
			B_Product.UpdateProduct(oProduct);

			msg = $"El producto {oProduct.ProductName} ha sido actualizado";
		}
		else
		{
			if (IsBiggerThanZero(oInOut.Quantity, oStorage.PartialQuantity))
			{
				oStorage.PartialQuantity = oStorage.PartialQuantity - oInOut.Quantity;
				B_Storage.UpdateStorage(oStorage);

				oProduct.TotalQuantity = oProduct.TotalQuantity - oInOut.Quantity;
				B_Product.UpdateProduct(oProduct);

				msg = $"El producto {oProduct.ProductName} ha sido actualizado";
			}
			else
			{
				msg = $"No existe la cantidad suficiente en bodega para el producto {oProduct.ProductName}";
			}
		}
	}

	private bool IsBiggerThanZero(int quantity, int storageQuantity)
	{
		if (storageQuantity > quantity)
		{
			return true;
		}
		return false;
	}
}

<div class="row col-4">
	<label for="InputWrhs" class="col-form-label">Seleccione una bodega</label>
	<select class="form-select" id="InputWrhs" @onchange="OnChangedWarehouse" required>
		<option selected>Bodegas:</option>
		@foreach(var warehouse in warehouses)
		{
			<option value="@warehouse.WarehouseId">@warehouse.WarehouseName</option>
		}
	</select>
</div>

<div>
	<h1>Registrar entradas y salidas</h1>
	<EditForm Model="oInOut" class="row col-4">

		<div class="col-12">
			<label for="InputPrdct" class="col-form-label">Seleccione una producto</label>
			<InputSelect @bind-Value="oInOut.StorageId" class="form-select" id="InputPrdct" @onchange="OnChangedWarehouse" required>
				<option selected>Productos:</option>
				@foreach(var storage in storages)
				{
					<option value="@storage.StorageId">@storage.Product.ProductName</option>
				}
			</InputSelect>
		</div>

		<div class="col-12">
			<label for="InputQnty" class="col-form-label">Cantidad:</label>
			<InputNumber @bind-Value="oInOut.Quantity" id="InputQnty" class="form-control" required></InputNumber>
	    </div>

		<div class="col-12">
			<div class="form-check form-switch">
				<label for="InputInptE" class="form-check-label">Producto de entrada</label>
				<InputCheckbox @bind-Value="oInOut.IsInput" id="InputInptE" class="form-check-input" role="switch" type="checkbox"></InputCheckbox>
			</div>
		</div>

		<div class="col-12 mt-3">
			<button type="button" class="btn btn-success" @onclick="SaveInOut">@buttonValue</button>
		</div>

	</EditForm>
</div>
<p>
	@msg
</p>